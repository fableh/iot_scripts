//#include <ESP8266HTTPClient.h>

//#include <RestClient.h>

#include <ESP8266WiFi.h>
#include <WiFiUdp.h>
#include <WiFiClientSecure.h>
#include "DHT.h"
#include <Wire.h>
#include <DS3231.h>
#define DHTPIN 13
#define DHTTYPE DHT22

DHT dht(DHTPIN, DHTTYPE);
DS3231 clock;
RTCDateTime dt;
WiFiUDP udp;
IPAddress timeServerIP;

//DateTime now;
// ========== start configuration ==========
// WiFi configuration
const char* ssid = "<SSID>";
const char* password = "<PW>";


//NTP
const char* ntpServerName = "time.versatel.de";

unsigned int localPort = 2390;
// Winter
const double timezone = 0.0;
//Sommmer
//const double timezone = 1.0;
// NTP time stamp is in the first 48 bytes of the message
const int NTP_PACKET_SIZE = 48;
/// buffer to hold incoming and outgoing packets
byte packetBuffer[ NTP_PACKET_SIZE];
/// A UDP instance to let us send and receive packets over UDP
// SAP HCP specific configuration
const char* host = "<iotmms_HOST>.hana.ondemand.com";
// with RTC
String device_id = "<deciceID>";
String message_type_id = "<msg-type>";
String oauth_token = "<oAUTH token>";
String url = "/com.sap.iotservices.mms/v1/api/http/data/" + device_id;
const int httpsPort = 443;
//dht var
float h;
float t;

const char* host_iot4 = "192.168.1.5"; //gw edge
const int httpPort_iot4 = 8699; //gw edge port
String url_iot4 = "/measures/88888822"; /gw edge url

// ========== end configuration ============

void setup() {
  Serial.begin(115200);
   clock.begin();
  //Alarm
  clock.armAlarm1(false);
  clock.armAlarm2(false);
  clock.clearAlarm1();
  clock.clearAlarm2();
  //CP ever 10 sec
  clock.setAlarm1(0, 0, 0, 10, DS3231_MATCH_S);
  ///UDP ever 30 min
  clock.setAlarm2(0, 0, 30,     DS3231_MATCH_M);
  //udp
  //clock.setAlarm1(0, 6, 00, 00, DS3231_MATCH_H_M_S);
  //udp every 10 min
  Serial.println();
    checkAlarms();
  // I2C init
  Wire.begin();
  dht.begin();
  Serial.println();
  Serial.print("connecting to WIFI Network: ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
  // Start UDP Server to receive the NTP response.
  Serial.println("Starting UDP");
  udp.begin(localPort);
  adjust();
}

void loop() {
  //----------------NTP -----------------
  dt = clock.getDateTime();
  Serial.print("Short format witch 12h mode: ");
  Serial.println(clock.dateFormat("jS M y, h:ia", dt));
  //----------------- DATA read -----------
  delay(5000);
  Serial.println("Read Data from DHT22....");
  read_dht_temp();
  read_dht_hum();
  Serial.println("Read Data from RTC....");
  read_rtc();

 
  
 if (clock.isAlarm1())
    {
    Serial.println("ALARM 1 TRIGGERED!");
    Serial.println("Preparing to send Message to SAP CP IoT Service....");
    send_temperature_to_iot4_via_edge();
    send_humidity_to_iot4_via_edge();
    
    }

    if (clock.isAlarm2())
    {
    read_rtc();
    Serial.println("ALARM 2 TRIGGERED!");
    adjust();

    }
}
void send_temperature_to_iot4_via_edge() {
  WiFiClient client;
  String post_payload_temp = "{ \"measureIds\": [10], \"values\":" + String(read_dht_temp()) + ", \"logNodeAddr\": [3]}";
  
  if (!client.connect(host_iot4, httpPort_iot4)) {
    Serial.println("connection failed");
    return;
  }

  Serial.println("Try to send temperature.....");

  client.print(String("POST ") + url_iot4 + " HTTP/1.0\r\n" +
               "Host: " + host_iot4 + "\r\n" +
               "Content-Type: application/json;charset=utf-8\r\n" +
               "Content-Length: " + post_payload_temp.length() + "\r\n\r\n" +
              post_payload_temp + "\r\n\r\n");

              Serial.println("request sent");

  Serial.println("reply was:");
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    Serial.println(line);
  };
}
void send_humidity_to_iot4_via_edge() {
  
  WiFiClient client;
  String post_payload_humidity = "{ \"measureIds\": [11], \"values\":" + String(read_dht_hum()) + ", \"logNodeAddr\": [3]}";
  //String post_payload_temp = "{ \"measureIds\": [10], \"values\":" + String(read_dht_temp()) + ", \"logNodeAddr\": [2]}";
  // String post_payload_humidity  = "{ \"measureIds\": [5], \"values\": [ \"98\"]}" ;
  
  if (!client.connect(host_iot4, httpPort_iot4)) {
    Serial.println("connection failed");
    return;
  }

  Serial.println("Try to send humidity.....");
  
  client.print(String("POST ") + url_iot4 + " HTTP/1.0\r\n" +
               "Host: " + host_iot4 + "\r\n" +
               "Content-Type: application/json;charset=utf-8\r\n" +
               "Content-Length: " + post_payload_humidity.length() + "\r\n\r\n" +
              post_payload_humidity + "\r\n\r\n");

              Serial.println("request sent");

 /* Serial.println("Try to send temperature.....");

  client.print(String("POST ") + url_iot4 + " HTTP/1.0\r\n" +
               "Host: " + host_iot4 + "\r\n" +
               "Content-Type: application/json;charset=utf-8\r\n" +
               "Content-Length: " + post_payload_temp.length() + "\r\n\r\n" +
              post_payload_temp + "\r\n\r\n");

              Serial.println("request sent");*/

  Serial.println("reply was:");
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    Serial.println(line);
  };



}

void send_message_to_hcp() {
  // Use WiFiClientSecure class to create TLS connection
  WiFiClientSecure client;
  Serial.print("connecting to ");
  //SAP HCP post string
  String post_payload = "{\"mode\":\"async\",\"messageType\":\"" + message_type_id  + "\",\"messages\":[{\"Humidity\":" + String(read_dht_hum())  + ",\"Temperature\":" + String(read_dht_temp())  + ",\"RTC\":" + clock.dateFormat("U", dt) + "}]}";
  Serial.println(host);
  if (!client.connect(host, httpsPort)) {
    Serial.println("connection failed");
    return;
  }
  Serial.print("requesting URL: ");
  Serial.println(url);
  Serial.println(post_payload);
  // using HTTP/1.0 enforces a non-chunked response
  client.print(String("POST ") + url + " HTTP/1.0\r\n" +
               "Host: " + host + "\r\n" +
               "Content-Type: application/json;charset=utf-8\r\n" +
               "Authorization: Bearer " + oauth_token + "\r\n" +
               "Content-Length: " + post_payload.length() + "\r\n\r\n" +
               post_payload + "\r\n\r\n");

  Serial.println("request sent");

  Serial.println("reply was:");
  while (client.connected()) {
    String line = client.readStringUntil('\n');
    Serial.println(line);
  };
}

float read_dht_temp() {
  // Read temperature as Celsius
  t = dht.readTemperature();
  Serial.println("temp is: " + String(t));
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    //   return;
  }
  return t;
}

float read_dht_hum() {
  //read humidity
  h = dht.readHumidity();
  Serial.println("humidity is: " + String(h));
  if (isnan(h) || isnan(t)) {
    Serial.println("Failed to read from DHT sensor!");
    //    return;
  }
  return h;
}

void read_rtc() {
  dt = clock.getDateTime();
  Serial.print("Long format with month name: ");
  Serial.println(clock.dateFormat("d F Y H:i:s",  dt));
 

  Serial.println();
}

void sendNTPpacket(IPAddress *address)
{
  Serial.println("sending NTP packet...");
  // set all bytes in the buffer to 0
  memset(packetBuffer, 0, NTP_PACKET_SIZE);
  // Initialize values needed to form NTP request
  packetBuffer[0] = 0b11100011;   // LI, Version, Mode
  packetBuffer[1] = 0;     // Stratum, or type of clock
  packetBuffer[2] = 6;     // Polling Interval
  packetBuffer[3] = 0xEC;  // Peer Clock Precision
  // 8 bytes of zero for Root Delay & Root Dispersion
  packetBuffer[12]  = 49;
  packetBuffer[13]  = 0x4E;
  packetBuffer[14]  = 49;
  packetBuffer[15]  = 52;
  // all NTP fields have been given values, now
  // you can send a packet requesting a timestamp:
  udp.beginPacket(*address, 123); //NTP requests are to port 123
  udp.write(packetBuffer, NTP_PACKET_SIZE);
  udp.endPacket();
}

static inline void adjust(void)
{
  unsigned long mi;
  int cb = 0;
  //get a random server from the pool
  WiFi.hostByName(ntpServerName, timeServerIP);
  // send an NTP packet to a time server
  sendNTPpacket(&timeServerIP);
  delay(2000);
  mi = millis();
  // wait to see if a reply is available
  while (millis() - mi < 2000 && !cb)
  {
    cb = udp.parsePacket();
    yield();
  }

  if (!cb)
  {
    Serial.println("[ERROR]: No packet available." );

    return;
  }
  udp.read(packetBuffer, NTP_PACKET_SIZE); // read the packet into the buffer
  unsigned long highWord = word(packetBuffer[40], packetBuffer[41]);
  unsigned long lowWord = word(packetBuffer[42], packetBuffer[43]);
  // combine the four bytes (two words) into a long integer
  // this is NTP time (seconds since Jan 1 1900):
  unsigned long secsSince1900 = highWord << 16 | lowWord;
  // now convert NTP time into everyday time:
  Serial.print("Unix UTC time = ");
  // Unix time starts on Jan 1 1970. In seconds, that's 2208988800:
  const unsigned long seventyYears = 2208988800UL;
  // subtract seventy years:
  unsigned long epoch = secsSince1900 - seventyYears;
  // print Unix time:
  Serial.println(epoch);
  // adjust to user timezone
  epoch += timezone * 3600;
  //set rtc via unix time
  clock.setDateTime(epoch);
  //rtc.setEpoch(epoch);
}

void checkAlarms()
{
  RTCAlarmTime a1;
  RTCAlarmTime a2;

  if (clock.isArmed1())
  {
    a1 = clock.getAlarm1();

    Serial.print("Alarm1 is triggered ");
    switch (clock.getAlarmType1())
    {
      case DS3231_EVERY_SECOND:
        Serial.println("every second");
        break;
      case DS3231_MATCH_S:
        Serial.print("when seconds match: ");
        Serial.println(clock.dateFormat("__ __:__:s", a1));
        break;
      case DS3231_MATCH_M_S:
        Serial.print("when minutes and sencods match: ");
        Serial.println(clock.dateFormat("__ __:i:s", a1));
        break;
      case DS3231_MATCH_H_M_S:
        Serial.print("when hours, minutes and seconds match: ");
        Serial.println(clock.dateFormat("__ H:i:s", a1));
        break;
      case DS3231_MATCH_DT_H_M_S:
        Serial.print("when date, hours, minutes and seconds match: ");
        Serial.println(clock.dateFormat("d H:i:s", a1));
        break;
      case DS3231_MATCH_DY_H_M_S:
        Serial.print("when day of week, hours, minutes and seconds match: ");
        Serial.println(clock.dateFormat("l H:i:s", a1));
        break;
        
      default:
        Serial.println("UNKNOWN RULE");
        break;
    }
  } else
  {
    Serial.println("Alarm1 is disarmed.");
  }

  if (clock.isArmed2())
  {
    a2 = clock.getAlarm2();

    Serial.print("Alarm2 is triggered ");
    switch (clock.getAlarmType2())
    {
      case DS3231_EVERY_MINUTE:
        Serial.println("every minute");
        break;
      case DS3231_MATCH_M:
        Serial.print("when minutes match: ");
        Serial.println(clock.dateFormat("__ __:i:s", a2));
        break;
     case DS3231_MATCH_H_M:
        Serial.print("when hours and minutes match:");
        Serial.println(clock.dateFormat("__ H:i", a2));
        break;
      case DS3231_MATCH_DT_H_M:
        Serial.print("when date, hours and minutes match: ");
        Serial.println(clock.dateFormat("d H:i:s", a2));
        break;
      case DS3231_MATCH_DY_H_M:
        Serial.println("when day of week, hours and minutes match: ");
        Serial.print(clock.dateFormat("l H:i:s", a2));
        break;
      default:
        Serial.println("UNKNOWN RULE");
        break;
    }
  } else
  {
    Serial.println("Alarm2 is disarmed.");
  }
}

